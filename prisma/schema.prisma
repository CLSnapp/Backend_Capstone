// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

model Users {
  id        String            @id @default(uuid())
  firstName String
  lastName  String
  email     String            @unique
  password  String
  role      Role              @default(USER)
  reviews   Reviews[]
  comments  Comments[]
  recipes   Recipes[]
  favorites FavoriteRecipes[]
}

model Recipes {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  instructions  String
  ingredient RecipeIngredient[]
  photo       String?
  categoryId  Int
  category    Categories         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creatorId   String
  user        Users              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  review      Reviews[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?          @updatedAt()
  favoritedBy FavoriteRecipes[]
}

model Ingredients {
  id               Int                @id @default(autoincrement())
  name             String
  recipeIngredient RecipeIngredient[]
}

model Units {
  id               Int                @id @default(autoincrement())
  name             String
  recipeIngredient RecipeIngredient[]
}

model RecipeIngredient {
  id           Int         @id @default(autoincrement())
  recipeId     Int
  recipe       Recipes     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredientId Int
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  quantity     String
  unitId       Int
  unit         Units       @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model FavoriteRecipes {
  userId   String
  user     Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId Int
  recipe   Recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id(name: "favoriteId", [userId, recipeId])
}

model Categories {
  id      Int       @id @default(autoincrement())
  name    String
  recipes Recipes[]
}

model Comments {
  id        Int       @id @default(autoincrement())
  comment   String
  userId    String
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  Int
  review    Reviews   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
}

model Reviews {
  id        Int        @id @default(autoincrement())
  review    String
  rating    Int        @default(0)
  userId    String
  user      Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  Int
  recipe    Recipes    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  comments  Comments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt()

  @@unique([userId, recipeId])
}
